/*
 * ToroDB
 * Copyright Â© 2014 8Kdata Technology (www.8kdata.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package com.torodb.backend.udt.record;

import com.torodb.backend.udt.MongoObjectIdUDT;
import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UDTRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value = {"http://www.jooq.org", "3.4.1"},
    comments = "This class is generated by jOOQ")
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Deprecated
public class MongoObjectIdRecord extends UDTRecordImpl<MongoObjectIdRecord> implements
    Record3<Integer, Integer, Integer> {

  private static final long serialVersionUID = -103355438;

  public void setUpper(Integer value) {
    setValue(0, value);
  }

  public Integer getUpper() {
    return (Integer) getValue(0);
  }

  public void setMiddle(Integer value) {
    setValue(1, value);
  }

  public Integer getMiddle() {
    return (Integer) getValue(1);
  }

  public void setLower(Integer value) {
    setValue(2, value);
  }

  public Integer getLower() {
    return (Integer) getValue(2);
  }

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------
  @Override
  public Row3<Integer, Integer, Integer> fieldsRow() {
    return (Row3) super.fieldsRow();
  }

  @Override
  public Row3<Integer, Integer, Integer> valuesRow() {
    return (Row3) super.valuesRow();
  }

  @Override
  public Field<Integer> field1() {
    return MongoObjectIdUDT.UPPPER;
  }

  @Override
  public Field<Integer> field2() {
    return MongoObjectIdUDT.MIDDLE;
  }

  @Override
  public Field<Integer> field3() {
    return MongoObjectIdUDT.LOWER;
  }

  @Override
  public Integer value1() {
    return getUpper();
  }

  @Override
  public Integer value2() {
    return getMiddle();
  }

  @Override
  public Integer value3() {
    return getLower();
  }

  @Override
  public MongoObjectIdRecord value1(Integer value) {
    setUpper(value);
    return this;
  }

  @Override
  public MongoObjectIdRecord value2(Integer value) {
    setMiddle(value);
    return this;
  }

  @Override
  public MongoObjectIdRecord value3(Integer value) {
    setLower(value);
    return this;
  }

  @Override
  public MongoObjectIdRecord values(Integer value1, Integer value2, Integer value3) {
    return this;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------
  public MongoObjectIdRecord() {
    super(MongoObjectIdUDT.MONGO_OBJECT_ID);
  }

  public MongoObjectIdRecord(Integer upper, Integer middle, Integer lower) {
    super(MongoObjectIdUDT.MONGO_OBJECT_ID);

    setValue(0, upper);
    setValue(1, middle);
    setValue(2, lower);
  }
}
